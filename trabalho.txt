0 * * l 0
0 _ | r 34

;##############################################################################
; AUTOMATO 1 = COMPLEMENTO DE 2 NO SUBTRAENDO
;
; Realiza o complemento de 2 no subtraendo
;##############################################################################

; Caminha para a direita invertendo números até encontrar espaço
1 0 1 r 1
1 1 0 r 1
1 = * l 2

; Somando 1
2 0 1 l 3
2 1 0 l 4

; Caminha para a esquerda repetindo o que lê
3 0 * l 3
3 1 * l 3
3 - * l 7 ; Copia elementos para realizar a soma

; Caminha para a esquerda invertendo números até encontrar sinal de igualdade
4 1 0 l 4
4 0 1 l 3
4 - * l 7 ; Copia elementos para realizar a soma

;##############################################################################
; AUTOMATO 2 = COPIA ELEMENTOS ADIÇÃO
;
; Realiza a cópia de elementos da parte esquerda de um operador
; para a parte esquerda do delimitador '|', para adição
; 
; a = 0 já lido
; b = 1 já lido
; | = delimitador
;##############################################################################

6 0 * r 6
6 1 * r 6
6 | * r 6
6 * * l 7

7 0 a l 8
7 1 b l 9
7 | * r 10
7 * * l 7

8 * * l 8
8 _ 0 r 6

9 * * l 9
9 _ 1 r 6

;##############################################################################
; AUTOMATO 3 = PROCURA OPERADOR
;
; Procura operador e adiciona um zero a esquerda do resultado se o operador
; for de adição, chama os estados de adição ou subtração
;##############################################################################

10 b 1 r 10
10 a 0 r 10
10 + * r 11add-zero ; Adiciona um zero a esquerda do resultado
10 - * r 11 ; Realiza a soma normal, por causa do complemento de 2

;##############################################################################
; AUTOMATO 4 = SOMA BINÁRIA
;
; Realiza a soma binária
;##############################################################################

11add-zero * * r 11add-zero ; Adiciona um zero a esquerda do resultado
11add-zero _ 0 l 12

11 * * r 11
11 = * l 12

12 * * l 12
12 0 a l 14
12 1 b l 13
12 + * l 19 ; Estado que move os números para frente da igualdade
12 - * r delete-zero ; Apaga zero adicionado à esquerda

13 * * l 13
13 | * l 15 ; Estado para soma 1

14 * * l 14
14 | * l 18 ; Estado soma 0

15 * * l 15
15 1 0 l 15 ; Soma 1 e vai 1
15 _ 1 r 16 
15 0 1 r 16 ; Soma 1

16 * * r 16
16 | * l 17

17 0 a r 11
17 1 b r 11
17 * * l 17

18 * * l 18
18 _ 0 r 16
18 0 a r 11 ; 0 + 0
18 1 b r 11 ; 0 + 1

;##############################################################################
; AUTOMATO 5 = MOVE RESULTADO
;
; Move resultado para a parte direita da igualdade
;##############################################################################

; Estados 19 ao 22 movem no caso de adição
19 * * l 19
19 _ * r 20

20 n _ r 23
20 b _ r 21
20 1 _ r 21
20 a _ r 22
20 0 _ r 22
20 | _ r 25

21 * * r 21
21 _ 1 l 19

22 * * r 22
22 _ 0 l 19

; Estados 19sub ao 22sub movem no caso de subtração
19sub * * l 19sub
19sub _  * r 20sub

20sub n _ r 21sub
20sub b _ r 21sub
20sub 1 * r 20check-b
20sub a _ r 22sub
20sub 0 _ r 22sub
20sub | _ r 25

21sub * * r 21sub
21sub _ 1 l 19sub

22sub * * r 22sub
22sub _ 0 l 19sub

20check-b b * l 20check-b
20check-b 1 a l 20add-zero
20check-b 0 a l 20
20check-b a * l 20delete-one
20check-b _ * * 22

20delete-one 1 _ r 20sub

20add-zero * * l 20add-zero
20add-zero _ 0 * 20sub

;##############################################################################
; AUTOMATO 6 = FORMATA RESULTADO
;
; Formata o resultado convertendo b's em 1's e a's em 0's
;##############################################################################

25 - * r 37
25 * * r 25
25 a 0 r 25
25 b 1 r 25
25 = * l 29 ; halt-accept

;##############################################################################
; AUTOMATO 7 = HALT-ACCEPT
;
; Se chegou até aqui, foi calculado corretamente
;##############################################################################

29 * * * halt-accept

;##############################################################################
; AUTOMATO 8 = CHECA OPERAÇÃO
;
; Checa tipo de operação a ser feita
;##############################################################################

34 * * r 34
34 + * l 35 ; Reposiciona cabeçote para a soma
34 - * r copy-add ; É necessário realizar complemento de 2
34 x * l 0sm1 ; Cópia para multiplicação

;##############################################################################
; AUTOMATO 9 = ADICIONA UM ZERO A ESQUERDA DO SUBTRAENDO
;
; Adiciona um zero a esquerda do subtraendo
;##############################################################################

copy-add 1 * r copy-equal-right ; Adiciona um zero a esquerda
copy-add 0 * * 1 ; Vai para o complemento de 2

copy-equal-right * * r copy-equal-right
copy-equal-right = _ r copy-equal-right
copy-equal-right _ = l back-to-copy-right

back-to-copy-right * * l back-to-copy-right
back-to-copy-right 0 _ r copy-add-zero-right
back-to-copy-right 1 _ r copy-add-one-right
back-to-copy-right - * r copy-add-first-zero-right

copy-add-zero-right _ 0 l back-to-copy-right

copy-add-one-right _ 1 l back-to-copy-right

copy-add-first-zero-right _ 0 * 1 ; Realiza complemento de 2

delete-zero a _ r copy-left
delete-zero b _ r copy-left

copy-left * * r copy-left
copy-left a _ l copy-add-zero-left
copy-left b _ l copy-add-one-left
copy-left = _ l copy-add-equal-left

copy-add-zero-left _ a r copy-left

copy-add-one-left _ b r copy-left

copy-add-equal-left _ = l finish-copy-add

finish-copy-add * * l finish-copy-add
finish-copy-add - * r 19sub

;##############################################################################
; AUTOMATO 10 = REPOSICIONA CABEÇOTE PARA SOMA
;
; Reposiciona cabeçote para soma
;##############################################################################

35 * * l 35
35 _ * r 6 ; Cópia de elementos para adição

;##############################################################################
; AUTOMATO 11 = DESFAZ COMPLEMENTO DE 2
;
; Desfaz o complemento de 2 para o subtraendo
;##############################################################################

; Caminha para a direita invertendo números até encontrar igualdade
37 a b r 37
37 b a r 37
37 0 1 r 37
37 1 0 r 37
37 = * l 38

; Somando 1
38 a b l 39
38 b a l 40
38 0 1 l 39
38 1 0 l 40

; Caminha para a esquerda repetindo o que lê
39 a * l 39
39 b * l 39
39 0 * l 39
39 1 * l 39
39 - * r 25

; Caminha para a esquerda invertendo números até encontrar sinal de igualdade
40 b a l 40
40 a b l 39
40 1 0 l 40
40 0 1 l 39
40 - * r 25

;##############################################################################
; 
; AUTOMATO 12 = REALIZA A CÓPIA DA OPERAÇÃO PARA A MULTIPLICAÇÃO
;
;##############################################################################

0sm1 * * l 0sm1
0sm1 | v l 0sm2
0sm2 _ v l 0sm3
0sm3 _ v l 0sm4
0sm4 _ v l 0sm5
0sm5 _ v l 0sm6
0sm6 _ v l 0sm7
0sm7 _ v l 0sm8
0sm8 _ v l 0sm9
0sm9 _ v l 0sm10
0sm10 _ v l 0sm11
0sm11 _ v l 0sm12
0sm12 _ v l 0sm13
0sm13 _ v l 0sm14
0sm14 _ v l 0sm15
0sm15 _ v l 0sm16
0sm16 _ v l 0sm17
0sm17 _ v l 0sm18
0sm18 _ v l 0sm19
0sm19 _ v l 0sm20
0sm20 _ | r 1cm

1cm * * r 1cm
1cm a * l 2cm
1cm b * l 2cm
1cm = * l 2cm
1cm | * r 7cmb

2cm 0 a l 3cm
2cm 1 b l 4cm
2cm * * l 2cm
2cm x # l 5cm
2cm | * * 1cm

3cm * * l 3cm
3cm _ 0 r 6cm

4cm * * l 4cm
4cm _ 1 r 6cm

5cm * * l 5cm
5cm _ x r 6cm

6cm * * r 6cm
6cm 0 * r 6cm
6cm 1 * r 6cm
6cm | * r 1cm

7cmb * * l 7cmb
7cmb _ f r 7cm

; Formata operação original
7cm * * r 7cm
7cm v _ r 7cm
7cm a 0 r 7cm
7cm b 1 r 7cm
7cm # _ r 7cm
7cm = _ l 8cm

8cm * * l 8cm
8cm _ * l 10m

;##############################################################################
; 
; AUTOMATO 13 = REALIZA A MULTIPLICAÇÃO BINÁRIA
;
; Código adaptado do próprio exemplo do sistema morphett
;
;##############################################################################

; Find end of num1
10m _ _ l 11m
10m x x l 11m
10m 0 0 r 10m
10m 1 1 r 10m

; If last digit of num1 is 0, multiply num2 by 2
11m 0 x r 20m
; If last digit of num1 is 1, add num2 ta tally and then multiply num2 by 2
11m 1 x r 30m

; Multiply num2 by 2
20m _ _ r 20m
20m x x r 20m
20m * * r 21m
21m _ 0 l 25m ; Multiplication by 2 done, return ta end of num1
21m * * r 21m
25m _ _ l 26m
25m * * l 25m
26m _ _ r 80m ; Finished multiplying. Clean up
26m x x l 26m
26m 0 0 * 11m
26m 1 1 * 11m

; Add num2 ta tally
30m _ _ r 30m
30m x x r 30m
30m * * r 31m
31m _ _ l 32m
31m * * r 31m
32m 0 a l 40m ; Add a zero
32m 1 b l 50m ; Add a one
32m a a l 32m
32m b b l 32m
32m _ _ r 70m ; Finished adding

; Adding a 0 ta tally
40m _ _ l 41m
40m * * l 40m ; Found end of num2
41m _ _ l 41m
41m * * l 42m ; Found start of num1
42m _ _ l 43m ; Found end of num1
42m * * l 42m
43m a a l 43m
43m b b l 43m
43m 0 a r 44m
43m 1 b r 44m
43m _ a r 44m
44m _ _ r 45m ; Found end of tally
44m * * r 44m
45m _ _ r 45m
45m * * r 46m ; Found start of num1
46m _ _ r 47m ; Found end of num1
46m * * r 46m
47m _ _ r 47m
47m * * r 48m
48m _ _ l 32m ; Found end of num2
48m * * r 48m

; Adding a 1 ta tally
50m _ _ l 51m ; Found end of num2
50m * * l 50m 
51m _ _ l 51m
51m * * l 52m ; Found start of num1
52m _ _ l 53m ; Found end of num1
52m * * l 52m
53m | * * halt-reject-big-number ; Número muito grande
53m a a l 53m
53m b b l 53m
53m _ b r 55m
53m 0 b r 55m ; return ta num2
53m 1 a l 54m
54m 0 1 r 55m
54m 1 0 l 54m
54m _ 1 r 55m
55m _ _ r 56m ; Found end of tally
55m * * r 55m
56m _ _ r 56m
56m * * r 57m ; Found start of num1
57m _ _ r 58m ; Found end of num1
57m * * r 57m
58m _ _ r 58m
58m * * r 59m
59m _ _ l 32m ; Found end of num2
59m * * r 59m

; Finished adding, clean up
70m b 1 r 70m
70m a 0 r 70m
70m _ _ l 71m
71m _ _ l 72m ; Found end of num2
71m * * l 71m
72m _ _ l 72m
72m * * l 73m ; Found start of num1
73m _ _ l 74m
73m * * l 73m
74m a 0 l 74m
74m b 1 l 74m
74m * * r 75m ; Finished cleaning up tally
75m _ _ r 76m
75m * * r 75m
76m _ _ r 20m ; Multiply num2 by 2
76m * * r 76m

; Finished multiplying, clean up
80m x _ r 80m
80m _ _ r 81m
81m _ _ l 82m
81m * _ r 81m
82m _ _ l 82m
82m * * * 83m

83m * * l 83m
83m | = * 29 ; halt-accept
83m _ = l 84m

84m * * l 84m
84m | _ l 84m
84m 1 _ r 85m
84m 0 _ r 87m
84m x _ r 89m
84m f _ * 29 ; halt-accept

85m _ * r 85m
85m * * l 86m

86m _ 1 l 84m

87m _ * r 87m
87m * * l 88m

88m _ 0 l 84m

89m _ * r 89m
89m * * l 90m

90m _ x l 84m